box:
  #id: python:2.7-slim
  id: cbankieratypon/python-2.7-flask
  #id: jazzdd/alpine-flask:latest
  #id: ubuntu:18.04
  ports:
    - "5000"

#dev:
#  steps:
#    - pip-install
#    - internal/watch:
#        code: python app.py
#        reload: true
        
# Build definition
build:
  # The steps that will be executed on build
  steps:
    # A step that executes `pip install` command
    - pip-install
    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: python unit test
        code: |
          python app_test.py
          echo "python version $(python --version) running"
          echo "pip version $(pip --version) running" 

#Build docker and test docker container. Push to OCIR if test is passed
docker-build:
  steps:
    - internal/docker-build:
      dockerfile: Dockerfile 
      image-name: cities-demo
    - internal/docker-push:
       image-name: cities-demo
       username: $OCIRUSERNAME
       password: $OCIRPASSWORD
       tag: v1
       #tag: ${WERCKER_GIT_BRANCH}-${WERCKER_GIT_COMMIT}
       repository: fra.ocir.io/ptsbm02/devops
       registry: https://fra.ocir.io/v2
       #working-dir: /pipeline/source  
inject-secret:
    box:
        id: alpine
        cmd: /bin/sh
    steps:    
    - kubectl:
        name: delete secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete secret ptsbm02; echo delete registry secret
    - kubectl:
        name: create secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry ptsbm02 --docker-server=$DOCKER_REGISTRY --docker-username=$OCIRUSERNAME --docker-password=$OCIRPASSWORD --docker-email=$DOCKER_EMAIL; echo create registry secret       

deploy-to-oke:
    box:
        id: alpine
        cmd: /bin/sh
    steps:

    - bash-template

    - script:
        name: "Visualise Kubernetes config"
        code: cat kubernetes.yml
           
    - kubectl:
        name: deploy to stage
        server: $KUBERNETES_MASTER
        #username: $KUBERNETES_USERNAME
        token: $KUBERNETES_TOKEN
        #namespace: stage
        insecure-skip-tls-verify: true
        command: apply -f kubernetes.yml
    #- script:
    #    name: "Get Load Balancer config"
    #    code: |
    #      export FRONTEND_SERVICE_IP=$(kubectl get -o jsonpath="{.status.loadBalancer.ingress[0].ip}"  --namespace=stage service sample-app-backend-svc)
    #      echo $FRONTEND_SERVICE_IP
    #after-steps:
    #- wercker/email-notify@2.0.1:
    #    from: wercker@devopsdemo.com
    #    to: radu.dobrinescu@oracle.com
    #    username: $SMTPUSER
    #    password: $SMTPPASS
    #    host: $SMTPSERVER
    #    branch: master
    #    passed-body: Passed body
    #    failed-body: Failed body
